
数组去重
let aa=[1,2,2,3]
function uniq(array){
    let temp=[];
    for(let i=0;i<array.length;i++){
        if(temp.array.indexOf(array[i])==-1){
            temp.push(array[i]);
        }
    },
    return temp
}
console.log(uniq(aa))


typeOf返回的六种类型
string,number,bull,undefined,function,object


方法重载
为实现统一功能，统一方法处理不同类型的数据。重载类型有参数个数、类型、顺序上的不同。

new做了哪些事？
1、创建了一个新对象
2、将新对象的typeOf指向构造函数
3、将构造函数的作用域赋给新对象
4、执行构造函数，将构造函数的属性、对象赋给新对象
5、返回新对象

W3C标准及规范
1、声明文档类型
2、定义编码语言
3、注释的使用方式
4、标签和属性的命名规则
5、标签必须有结束标记
6、属性值必须用双引号或单引号
7、嵌套需合理
8、特殊符号编码表示

实现Ajax的基本步骤
1、创建XML对象
2、创建HTTP请求
3、设置响应HTTP请求状态变换的函数
4、设置获取服务器返回数据的语句
5、发送HTTP请求，获取异步调用的数据
6、用JavaScript和DOM实现异步刷新

Ajax的优缺点?
优点：
1、减轻服务器负担
2、客户端闲置利用
3、界面无刷新，用户体验好
4、界面和应用分离
缺点：
1、界面无法后退
2、暴露更多的数据及逻辑
3、破坏了程序的异常机制
4、对搜索引擎支持弱

jQuery中的this和$(this)的区别？
this指的是DOM对象，$(this)中的this指的是jQuery对象。

v-if和v-show的区别？
v-if是通过动态的对DOM树添加或删除DOM元素，来达到显示隐藏。适用于运营环境比较稳定的场所
v-show是通过对DOM元素的display属性控制显隐。适用于频繁切换的运营环境

VUE的生命周期？
beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestory、destory

Sql语句分页查询
SELECT * FROM userdetail LIMIT (pageNow-1)*pageSize,pageSize;

toString和string的区别？
toString不能处理undefined和null,而string可以转换以上两个变量。

构造函数的特点？
1、首字母大写
2、内部用this，指将要生成的实例
3、new生成实例对象

如何解决跨域问题？
jsonp应用面窄，步骤繁琐，所以用jQuery实现跨域
客户端：
$.ajax({
    dataType:jsonp,
    success:function(res){...}
})
服务端：
router.get("/",(req,res)=>{
    var fun =req.query.callback;
    var data="数据";
})

JS的错误类型？
1、SynataxError解析代码时发生语法错误
2、ReferenceError引用了一个不存在的变量
3、TypeError变量或参数不是预期类型
4、URLError与url相关函数不正确
5、RangeError超出有效范围

构建跨游览器兼容网站的8个基本技巧。
1、保持代码简介
2、使用框架
3、定义有效的Doctype
4、重置CSS
5、验证
6、条件注释
7、为差异做准备
8、不要跳过跨游览器测试

清除浮动的方法？
1、父级定义height
2、父级定义overflow:hidden
3、父级div定义伪类：after和zoom
4、结尾处加空div标签

JS代码优化？
由于IE6的存在，使我们必须考虑JS代码优化
1、字符串拼接用arr[i]代替空变量+=
2、for循环时 var len=div.length;i<len;
3、减少页面重载
4、减少作用域链上的查找次数
5、避免双重解释

排序方法有哪些？
内部排序
1、插入排序（直接插入、折半插入、索引插入、希尔插入O(n^1.25~n^1.65),O(1),bw）
2、交换排序（冒泡排序(O(n^2),O(1),w))、快速排序O(nlog2n,log2n,bw)）
3、选择排序（简单排序、锦标赛排序、堆排序）
4、归并排序
5、基数排序
外部排序...

移动端适配方案？
方案一
<meta name="viewport" content="width=device-width,maximum-scable=1,minimum-scable=1,userscable=no,initial=1"/>
<script>
    document.documentElement.style.fontSize=document.documentElement.device-width/7.5+'px';
</script>
div{
    width:5rem;height:2rem
}
@media screen (max-width:321px){.m-navlist{font-size:15px}}
@media screen (min-width:321px) and (max-width:400px){.m-navlist(font-size:16px)}
@media screen (min-width:400px){.m-navlist{font-size:18px}}

如何在VUE项目中引入elementUI组件？
1、初始化项目
vue init webpack vue-elementui
npm run dev
2、安装elementUI
npm i element-ui -S
3、引入elementUI
在main.js中引入elementUI
4、测试
新建header.vue文件，复制一段elementUI的代码
在App.vue中引入header.vue

写一个简单的闭包
function test(){
    var count=0;
    function a(){
        console.log(++count);
    }
    return a;
}
var demo=test();
demo();
demo();

微信小程序开发组件和API，组件中的搜索图标是<icon type="search" size="20" color="#ccc"/>

微信小程序image引用路径不对时，不报错。

小程序的生命周期
小程序启动onLanuch、监听页面加载onLoad、监听页面显示onShow、1监听页面卸载onUnload 2监听页面隐藏onHide、
监听初始页面渲染完成onReady

微信小程序app.jsonp内容
app({
    onLanuch({
        var logs=wx.getUserInfo('logs');
        logs.unshift(Date now());
        wx.setUserInfo('logs',log);
    }),
    getUserInfo:function (cb){
        var that=this;
        if(this.globalData.userInfo){
            typeof cb="function" && cb(this.globalData.userInfo);
        }else{
            wx.login({
                success:function(res){
                    wx.getUserInfo({
                        success:function(res){
                            that.globalData.userInfo=res.userInfo;
                            typeof cb="function" && cb(that.globalData.userInfo);
                        }
                    })
                }
            });
        }
    },
    globalData:{
        userInfo:null;
    }
})

微信小程序一个class可以有两个类名，一个大家公用样式名一个自己用的样式

当需要一行中两头对齐显示CSS可以用下面代码解决，
.detail .float{
  overflow: hidden;
}
.float>view:nth-of-type(2n+1){
  float: left;
}
.float>view:nth-of-type(2n){
  float: right;
}
或
justify-content: flex-start|flex-end|center|space-between|space-around|initial|inherit;
图片加一个model="aspectFill"
CSS中text需要单独调整，如购物车加、减按钮调试时需要分开，写的时候可以将CSS类名放在一起。

浮动之后给“满oo减oo”与“youjiantou”图片加右浮动之后，图片顺序会调换。

CSS中写样式时可以共用，但是注意全局污染。

注意class多个s造成的问题是类名不正确样式加不上去。
用箭头根本捕捉不到类名class="switch",class就消失了，学会自己排查

提前构思好整个页面布局，大体上游览一遍，具体怎么布局，这样能减少不必要的调整。


  chooseXilie:function(e){
    var that=this
    var xilieId=e.currentTarget.dataset.xilieid
    
    var list = that.data.xilielists

    console.info(xilieId,"系列选")    《《《《《《《
    console.log(list)                 《《《《《《《

    for(var i in list){
      if(list[i].id==xilieId){
        console.log("价格")
        console.log(list[i].jiagequjian)
        that.setData({
          jiagequjians:list[i].jiagequjian
        })
      }
    }
    console.log(e.currentTarget.dataset.xilieid)
  },

  js中找不到错误时，多用console.log('变量名')，看到底哪个变量打印不出来

  小程序中bindtap和catchtap的区别？
  bindtap不能阻止冒泡，而catchtap可以阻止冒泡。

  小程序上传身份证图片的实现方法
js页面                               《《《《《《
Page({
  data: {
    tempFilePaths: '',              //身份证上传路径
    hidden: true, //true
    buthidden: false, //false       
    sourceType: ['album', 'camera']
  },

  onLoad: function (options) {
    try {
      var res = wx.getSystemInfoSync()
      var platform = res.platform
      if (platform == 'ios') {
        util.msg("警告", "IOS系统暂不支持拍照，请从相册选择照片")
        this.setData({
          sourceType: ['album']
        })
      }
      console.log(platform)
    } catch (e) { }
  },
  frontimage: function () {
    var that = this;
    var Type = that.data.sourceType
    wx.chooseImage({
      count: 1, // 默认9 
      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有
      sourceType: Type, // 可以指定来源是相册还是相机，默认二者都有 
      success: function (res) {
        // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片 
        that.setData({
          FilePaths: res.tempFilePaths
        })
      }
    })
  },
  reciteimage: function () {
    var that = this;
    var Type = that.data.sourceType
    wx.chooseImage({
      count: 1, // 默认9 
      sizeType: ['original', 'compressed'], // 可以指定是原图还是压缩图，默认二者都有 
      sourceType: Type, // 可以指定来源是相册还是相机，默认二者都有 
      success: function (res) {
        // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片 
        that.setData({
          recitePaths: res.tempFilePaths
        })
      }
    })
  },
})


wxml页面
<loading hidden="{{hidden}}">
  上传中...
</loading>
<view class="merch_img">
  <view class="indentityCard">
    <view class="identityCard_front" bindtap="frontimage">
      <image src="../../pages/images/merch_att_add/tubiao.png" class="images"></image>
      <view class="imgs">身份证正面</view>
      <image src="{{FilePaths}}" mode="aspecFill" class="paths" />
    </view>
    <view class="identityCard_recite" bindtap="reciteimage">
      <image src="../../pages/images/merch_att_add/tubiao.png" class="images"></image>
      <view class="imgs">身份证背面</view>
      <image src="{{recitePaths}}" mode="aspecFill" class="paths" />
    </view>
  </view>
  <button class="next_step" type="primary" disabled="{{buthidden}}" bindtap="primary">下一步</button>
</view>

//////////////////////////////////////////////////////////////////////////////////
购物车全选与反选
<view wx:for="{{carts}}" class="carts-item" data-title="{{item.title}}" data-url="{{item.url}}" bindtap="bindViewTap">
<view class="my-wrap"><view class="my-tlt">
{{item.title}} 
</view>
<view class="my-list bordernone">
<icon wx:if="{{item.selected}}" type="success_circle" size="20" bindtap="bindCheckbox" data-index="{{index}}" class="my-check"/>
<icon wx:else type="circle" size="20" bindtap="bindCheckbox" data-index="{{index}}" class="my-check"/>
<image src="{{item.image}}" class="my-pic" mode="aspectFill"></image>
<view class="my-left">
<view class="my-title"> K金砖玉石电视背景墙砖</view>
<text class="my-txt">尺寸：800X800</text>
<view class="my-bnt">

<!-- 减号 -->
<text class="{{minusStatuses[index]}} bnt" data-index="{{index}}" bindtap="bindMinus">-</text>
<!-- 数值 -->
<input type="number" bindchange="bindManual" class="int" value="{{item.num}}" />
<!-- 加号 -->
<text class="normal bnt" data-index="{{index}}" bindtap="bindPlus">+</text>]


</view>
</view>
<view class="my-right">
<icon class="iconfont del"/>
<text class="gay">￥{{item.price}}</text>
</view>
</view>
</view>

<view class="float">

<!-- 全选 -->
<view bindtap="bindSelectAll" class="my-sel" >
<icon wx:if="{{selectedAllStatus}}" type="success_circle" size="20" class="l-mycheck"/>
<icon wx:else type="circle" size="20" class="l-mycheck"/>
<text>全选</text>
</view>
<view class="my-rightbox">
<view class="my-count" data='{{sep}}'>

<!-- 统计 -->
合计（不含运费）：￥<text>{{count}}</text>
</view>
<view class="my-bnts" bindtap="setPayment" >
结算（<text>{{number}}</text>）
</view>
</view>
</view>

这里css自己去写,这里不做多介绍，只做效果：

首先：先定义js

在page.data里面

count:0,
number:0,
minusStatuses: ['disabled', 'disabled', 'normal', 'normal', 'disabled'],
carts: [
{title:'自营商城',image:'../images/my.png',num:'1',price:'198.0',selected:false},
{title:'自营商城',image:'../images/my.png',num:'1',price:'100.0',selected:false},
{title:'自营商城',image:'../images/my.png',num:'3',price:'15.0',selected:false},
{title:'自营商城',image:'../images/my.png',num:'2',price:'15.2',selected:false},
{title:'自营商城',image:'../images/my.png',num:'1',price:'122.0',selected:true},
]，

carts这个你可以通过url自己传参，我这里自己写点数据，

js代码bindMinus、bindPlus分别改造为如下：

bindMinus: function(e) {
var index = parseInt(e.currentTarget.dataset.index);

var num = this.data.carts[index].num;

if (num > 0) {
num --;
}
var minusStatus = num <= 0 ? 'disabled' : 'normal';
var carts = this.data.carts;
carts[index].num = num;

var minusStatuses = this.data.minusStatuses;
minusStatuses[index] = minusStatus;

this.setData({
carts: carts,
minusStatuses: minusStatuses
});
},
bindPlus: function(e) {
var index = parseInt(e.currentTarget.dataset.index);
var num = this.data.carts[index].num; 
num ++;
var minusStatus = num <= 1 ? 'disabled' : 'normal';
var carts = this.data.carts;
carts[index].num = num;

var minusStatuses = this.data.minusStatuses;
minusStatuses[index] = minusStatus;

this.setData({
carts: carts,
minusStatuses: minusStatuses
});
}, 

单选：这里需要判断一下已选状态，一般购物车勾选状态是记录在网络的。index值用于传值js，遍历之用。

bindCheckbox: function(e) {
  var index = parseInt(e.currentTarget.dataset.index);
  var selected = this.data.carts[index].selected;
  var carts = this.data.carts;
var num = parseInt(this.data.carts[index].num); 
var price=this.data.carts[index].price; 
if(!selected){
this.setData({
count:this.data.count+ num*price,
number:num+this.data.number

});
}else{
this.setData({
count:this.data.count- num*price,
number:this.data.number-num

});
}

  carts[index].selected = !selected;
 
  this.setData({
    carts: carts
  });
},

全选与全不选事件

实现bindSelectAll事件，改变全选状态

首先定义一个data值，以记录全选状态

selectedAllStatus: false

事件实现：

bindSelectAll: function() {
var selectedAllStatus = this.data.selectedAllStatus;
selectedAllStatus = !selectedAllStatus;
var carts = this.data.carts;
if(!selectedAllStatus){
for (var i = 0; i < carts.length; i++) {
carts[i].selected = selectedAllStatus;
var num = parseInt(this.data.carts[i].num); 
var price=parseInt(this.data.carts[i].price); 
this.setData({
count:this.data.count-num*price,
number:this.data.number-num

});
}
}